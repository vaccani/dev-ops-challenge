AWSTemplateFormatVersion: '2010-09-09'
Description: Bastion Host for devops challenge
Parameters:
  Environment:
    Type: "String"
    Description: Initializing a variable to use upon CFN execution
    ConstraintDescription: "Invalid environment name. Try dev, qa, or prod."
    AllowedValues:
      - "dev"
      - "qa"
      - "prod"
  Owner:
    Description: Enter Team or Individual Name Responsible for the Stack.
    Type: String
    Default: FirstName LastName
  Project:
    Description: Enter Project Name.
    Type: String
    Default: Bastion Creation
    Type: String
    Default: 00/00/201x
  OsType:
    Description: Select OS Type for Bastion Host.
    Type: String
    Default: amazon
    AllowedValues:
    - amazon
  NetworkAccessIP:
    Description: Source that has SSH access to the bastion host. (i.e. 50.32.108.38/32)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  Ec2KeyPair:
    Description: Select Keypair to Assign to EC2 Instances
    Type: AWS::EC2::KeyPair::KeyName
  PolicyName:
    Description: Name of the Ami Role for Bastion
    Type: String
  InstanceType:
    Description: Select Instance Type.
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    ConstraintDescription: Must be a valid EC2 instance type.
  AMIAmazon:
    Type: String
Conditions:
  AmazonHost:
    Fn::Equals:
    - Ref: OsType
    - amazon

Resources:
  BastionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "ec2.amazonaws.com"
            - "ssm.amazonaws.com"
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
      Path: "/"
  IamPolicies:
    Type: AWS::IAM::Policy
    DependsOn: 
    - BastionIamRole
    Properties:
      PolicyName: !Ref PolicyName
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - iam:PassRole
          - iam:GetRole
          - ec2:Describe*
          - elasticloadbalancing:Describe*
          - autoscaling:Describe*
          - cloudwatch:*
          - logs:*
          - sts:*
          - s3:*
          - rds:Describe*
          Resource: "*"
      Roles:
      - Ref: BastionIamRole
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: BastionIamRole
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH Access to Bastion Instance
      VpcId: 
        Fn::ImportValue: "leo-VPC"
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-bastion-access"
      - Key: Owner
        Value:
          Ref: Owner
      - Key: Project
        Value:
          Ref: Project
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref NetworkAccessIP
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
    - BastionSecurityGroup
    - IamInstanceProfile
    Properties:
      IamInstanceProfile:
        Ref: IamInstanceProfile
      ImageId: !Ref AMIAmazon
      InstanceInitiatedShutdownBehavior: stop
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: Ec2KeyPair
      Monitoring: 'true'
      SecurityGroupIds:
      - Ref: BastionSecurityGroup
      - Fn::ImportValue: "hello-rds-DBSecurityGroup"
      SubnetId: 
        Fn::ImportValue: "leo-Subnet1"
      UserData:
        Fn::Base64: |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit

          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          
          sudo yum update -y && sudo yum upgrade -y
          sudo yum install make curl wget git jq telnet postgresql -y
          
          
          cat <<"EOF" > /home/ec2-user/import_db.sh
          #!/bin/sh
          set -ex

          #Set DB Environment Variables:

          export DB_HOST=$(aws  rds describe-db-instances --region us-east-1 --output json | jq -r '.DBInstances[] | "\(.Endpoint.Address) " ' | grep "leo")
          export DB_USER=admin1234
          export DB_PORT=5432
          export DB_NAME=hello_world
          
          #Get database.sql file

          # sudo aws s3 cp s3://challenge-leo-12345/database.sql /home/ec2-user/

          wget https://raw.githubusercontent.com/vaccani/dev-ops-challenge/dev/db/database.sql -P /home/ec2-user/
          
          
          #Import database 
          
          export PGPASSWORD='admin1234';  psql -h $DB_HOST -U $DB_USER -p $DB_PORT -d $DB_NAME -f /home/ec2-user/database.sql
          
          EOF

          sudo chmod +x /home/ec2-user/import_db.sh && sudo /home/ec2-user/import_db.sh
          
      #END of USERDATA

      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
      - Key: Owner
        Value:
          Ref: Owner
      - Key: Project
        Value:
          Ref: Project
      - Key: ENV
        Value:
          Ref: Environment

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    DependsOn:
    - EC2Instance
    - EIP
    Properties:
      InstanceId:
        Ref: EC2Instance
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
Outputs:
  Owner:
    Description: Team or Individual that Owns this Formation.
    Value:
      Ref: Owner
  Project:
    Description: The project name
    Value:
      Ref: Project
  PublicDns:
    Description: Bastion Public DNS Name
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicDnsName
  EIP:
    Description: Bastion External IP Address
    Value:
      Ref: EIP
  OsType:
    Description: OS Type.
    Value:
      Ref: OsType
  InstanceType:
    Description: Instance Type.
    Value:
      Ref: InstanceType
  Ec2KeyPair:
    Description: Key Pair used.
    Value:
      Ref: Ec2KeyPair
  BastionIamRole:
    Description: IAM Instance Profile Role Created.
    Value:
      Ref: BastionIamRole
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Ownership
      Parameters:
      - Owner
      - Project
    - Label:
        default: Instance Settings
      Parameters:
      - Ec2KeyPair
      - OsType
      - InstanceType
    - Label:
        default: Network Configuration
      Parameters:
      - NetworkAccessIP   
    ParameterLabels:
      Owner:
        default: Team or Individual Owner
      PublicSubnet:
        default: Public Subnet
     
      BastionInternalAccessSecurityGroup:
        default: Instance Access Security Group
      NetworkAccessIP:
        default: Network IP to Access Bastion Host
      OsType:
        default: OS Type
      AllowSshRdpToBastionRuleNumber:
        default: Remote to Public SSH/RDP
      AllowIcmpToBastionRuleNumber:
        default: Remote to Public ICMP
      InstanceType:
        default: Instance Type