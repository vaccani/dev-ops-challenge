## DevOps challenge

First of all thanks for being part of this process :)

## Entering the Matrix.

Hello NEO.

We have a Rails application that says Hello world! But is becoming really popular.
Our old infrastructure run in EC2 machines but the maintenance of this is really hard for us.
We hear that we can use containers in order to build and ship our application in a fast and safe way.

You should choose between two pills:

[The red pill]: You can take the control of the Matrix and run the containers under self managed EC2 instances.

[The blue pill]: You take this and you wake up using Fargate.

Please explain the reason for your decision.
After you take a choice, please complete the following tasks.

1. Create the infrastructure and the pipeline needed in order to serve our application from ECS containers.
2. Host our database in REDS and import the current data (/db/database.sql).
3. Create a script that easy deploy new code to the stack.
4. Set autoscaling policies in order to have a minimum of 1 task, a desired of 1, and a maximum of 10 based on the CPU usage.

## Application details:

* Ruby version: 2.2
* Rails version: 4.2
* Postgres version :11.6

Database configuration: config/database.yml
Update your host.
username: admin
password: admin
db name: hello_world

## Test your results

Is everithing is ok the route /hello_world will return the following respose:
{"id":1,"text":"Hello World!"}


## Answer:

The reason why I took the blue pill is quite simple:

With Fargate we can forget about managing servers and focus on the configuration and the behavior of our containers. 
Taking advantage of the task definitions and autoscaling policies and with a real usage of the infrastructure as a code concept.
Avoiding manual steps, patching and mantainging versions and dependencies. 


## Usage:

1-Clone the repo:

https://github.com/vaccani/dev-ops-challenge.git


2- Run “make start” in the root of the git project

3- Run “make deploy”

At the end of the script, if everything went well, the api endpoint should be shown on your terminal.

open it in your web browser and check if the result are the spected

4- Once you have finished testing the stack, you can delete all the resources created for the challenge running: “make teardown”


## Explanation



Docker version 19.03.13
aws-cli/1.18.69
